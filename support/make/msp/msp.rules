#-*-Makefile-*- vim:syntax=make
#$Id: msp.rules,v 1.20 2010-03-17 00:38:05 klueska Exp $

define MSP_HELP

 MSP extras:

   debug    : compile with minimal optimization and debug symbols
   debugopt : compile with debug symbols

 Programmer options:

   bsl,auto      : (default) use BSL programmer on the first mote found
   bsl,<port>    : use BSL programmer on <port> serial port
   bsl,ref,<ref> : use BSL programmer on the mote with reference <ref>

   The dev or host parameter for the programmer option need not be specified,
   in which case it is expected to be defined as in an environment variable of
   the same name in all caps (such as BSL).

endef
HELP += $(MSP_HELP)

MSPGCC_MIN_VER := 4.6.3
MSPGCC_VER_OK := $(shell expr `msp430-gcc -dumpversion` \>= '$(MSPGCC_MIN_VER)')

OBJCOPY = msp430-objcopy
OBJDUMP = msp430-objdump
SET_ID = tos-set-symbols
NESC = nescc
LIBS = -lm

INSTALL_IHEX = $(MAIN_IHEX).out$(if $(NODEID),-$(NODEID),)

PFLAGS += -Wall -Wshadow

# Check if the user specified a programmer type with a .extra file.
# If not, use bsl by default.
ifndef TOSMAKE_PROGRAMMER_TYPE
  $(call TOSMake_include,msp/bsl.extra)
endif

DEFAULT_PROGRAM ?= bsl

BUILDLESS_DEPS += bytes

# Use the 'if' function instead of the 'ifdef' construct because ifdef freaks
# out with call in there.  I don't know why.
$(if $(PROGRAM),,$(call TOSMake_include,msp/$(DEFAULT_PROGRAM).extra))

# Add in the standard PFLAGS
PFLAGS += $(STD_PFLAGS)

# Replace the %T with the correct tosdir path
PFLAGS_SUB = $(shell tos-sub-tosdir $(TOSDIR_OPTS) $(PFLAGS))

# Build storage file if volumes.xml present
ifneq ($(wildcard $(TOSMAKE_VOLUME_FILE)), )
build_storage: $(TOSMAKE_BUILD_DIR)/StorageVolumes.h

$(TOSMAKE_BUILD_DIR)/StorageVolumes.h: $(TOSMAKE_VOLUME_FILE) build_dir
	$(TOSMAKE_VOLUME_ALLOCATOR) $(TOSMAKE_VOLUME_ALLOCATOR_FLAGS) <$(TOSMAKE_VOLUME_FILE) >$@ || rm -f $@

PFLAGS += -I$(TOSMAKE_BUILD_DIR)
else

build_storage:

endif

# Main build target for building an application
ifeq ($(TOSMAKE_DO_REINSTALL),)
tinyos_image: ihex build_tosimage build_buildinfo FORCE
else
tinyos_image:
	@echo -e "$(INFO_STRING) reinstalling $(COMPONENT) binary"
endif

setid: tinyos_image FORCE
ifneq ($(NODEID),)
	@# Edit the binary with the updated nodeid
	@echo -e "$(INFO_STRING) setting the node id to $(NODEID)"
	@$(SET_ID) --objcopy $(OBJCOPY) --objdump $(OBJDUMP) --target ihex $(MAIN_IHEX) $(INSTALL_IHEX) TOS_NODE_ID=$(NODEID) $(TOSMAKE_AMADDR)=$(NODEID)
else
	@# Just use the default NODEID that was compiled in initially
	@cp $(MAIN_IHEX) $(INSTALL_IHEX)
endif

ihex: exe bytes FORCE
	@echo -e "$(INFO_STRING) creating ihex file"
	$(OBJCOPY) --output-target=ihex $(MAIN_EXE) $(MAIN_IHEX)

exe: exe0 bytes FORCE
	@:

exe: $(TINYOS_MAKE_EXTRA_DEPS) $(COMPONENT).nc build_dir build_storage FORCE
	@echo -e "$(INFO_STRING) compiling $(COMPONENT) to a $(TARGET) binary"
	$(NESC) -o $(MAIN_EXE) $(NCC_SAFE_TINYOS_FLAGS) $(OPTFLAGS) $(NESC_PFLAGS) $(CFLAGS) $(WIRING_CHECK_FLAGS) $(COMPONENT).nc $(LIBS) $(LDFLAGS)
