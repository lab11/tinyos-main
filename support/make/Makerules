#-*-Makefile-*- vim:syntax=make
#$Id: Makerules,v 1.6 2008/09/26 20:13:58 klueska Exp $

# @author Cory Sharp <cssharp@eecs.berkeley.edu>

### --- This makefile requires GNU Make version 3.80 or newer.


### ---
### --- Prepare variables
### ---

#  Most variables are set in Makefile.include

#  Mung MAKERULES for Cygwin; see the warning below for more details.
ifneq ($(findstring \,$(TINYOS_MAKERULES)),)
TINYOS_MAKERULES := $(subst \,/,$(TINYOS_MAKERULES))
define BACKSLASH_WARNING
$(WARN_STRING) TINYOS_MAKERULES contains backslashes.

    The environment variable TINYOS_MAKERULES contains backslashes \'s.  This
    can cause shell scripts including ones in this make system to fail in
    strange ways.  I've changed those to forward slashes for you for this
    build.  However, you are strongly encouraged to respecify TINYOS_MAKERULES
    as either a standard unix-style path or as a mixed-style path where the
    backslashes are replaced with forward slashes /'s.

endef
$(warning $(BACKSLASH_WARNING))
endif

#  Allow users to specify additional directories to find .target, .extra, and
#  .rules files. This allows for platforms to be stored in separate repositories
#  and still compile against the main TinyOS code.
#  To use this feature, set the environment variable TINYOS_MAKE_DIR_ADDITIONAL
#  to a space separated list of additionals paths to make folders you would
#  like the make system to search.
TOSMAKE_PATH = $(addsuffix /support/make,$(subst :, ,$(TINYOS_ROOT_DIR_ADDITIONAL)))
TOSMAKE_PATH += $(TINYOS_MAKE_DIR)

#  Also determine the path for all TinyOS OS directories that may have code in
#  them. This makes out-of-tree builds and multiple TinyOS code trees very easy
#  to manage. All relevant folders will automatically be included to the call to
#  nescc.
TOSMAKE_OS_DIR_ALL = $(addsuffix /tos,$(TINYOS_ROOT_DIR_ADDITIONAL)) $(TINYOS_OS_DIR)

#  Set the rules that expand PFLAGS (which have %T in them) to the PFLAGS that
#  nescc sees when it compiles.
TOSDIR_OPTS = $(addprefix --tosdir ,$(TOSMAKE_OS_DIR_ALL))
NESC_PFLAGS = $(shell tos-sub-tosdir $(TOSDIR_OPTS) $(PFLAGS))

#  Add the defaults to the list of PFLAGS. These are set in Makedefaults.
#  - The standard include directories to PFLAGS. (tos/system, etc.)
#  - nescc defaults (all warnings, include tos.h)
#  - nescc scheduler
#  - .c file for nescc output
#  - Separator for nescc output
#  - Define the default TOS AM group
PFLAGS += $(TINYOS_PFLAGS_STD_INCLUDE)
PFLAGS += $(NESC_FLAGS)
PFLAGS += -fnesc-scheduler=$(NESC_SCHEDULER)
PFLAGS += -fnesc-cfile=$(NESC_CFILE)
PFLAGS += -fnesc-separator=$(NESC_SEPARATOR)
PFLAGS += $(TINYOS_PFLAGS_DEFINED_TOS_AM_GROUP)

#  Save makecmdgoals (a read only var) to goals so that we can modify it.
GOALS += $(MAKECMDGOALS)

#  Extract user options from goals of the form opt,arg, transform to opt=arg,
#  and evaluate.  Then, reduce GOALS to have the args removed.
OptRE := [,.]
GoalOpts := $(shell perl -e 'print join " ", map {s{^(.*?)$(OptRE)}{\U$$1=};$$_} grep /$(OptRE)/, split /\s+/, "$(GOALS)";')
GOALS := $(shell perl -e '$$_="$(GOALS)"; s{$(OptRE)\S*}{}g; print;')
$(foreach opt,$(GoalOpts),$(eval $(opt)))


### ---
### --- Define make functions.
### --- (Lord, this is ugly. I want a real scripting language so bad.)
### ---
### --- The functions a user will generally be interested in are
### ---   TOSMake_include(file)
### ---   TOSMake_include_platform(dir)
### ---

#  names(words)
#    Produce option names, like junk from /path/to/junk.target.
names = $(sort $(basename $(notdir $(1))))

#  TOSMake_find(file_or_dir)
#    Search for file_or_dir within TOSMAKE_PATH.  For the special case of
#    initializing TOSMAKE_PATH itself, this function does not search
#    TOSMAKE_PATH if file_or_dir begins with +.
sh_search = for a in $(TOSMAKE_PATH); do [ -e "$$a/$$n" ] && echo "$$a/$$n" && break; done
TOSMake_find = $(if $(filter +%,$(1)),$(1:+%=%),$(shell n="$(1)"; $(sh_search)))

#  TOSMake_makelist(dir,extension)
#    Get a list of files with the given extension from a directory which MUST
#    be a subdir under TOSMAKE_PATH.
TOSMake_makelist = $(wildcard $(call TOSMake_find,$(1))/*.$(2))

#  TOSMake_include(file)
#    Include a makefile which MUST be in a dir or subdir under TOSMAKE_PATH.
TOSMake_include = $(eval include $(call TOSMake_find,$(1)))

#  TOSMake_extra_targets(name)
#    Create a default make targets for a TOSMake extra full with its possible
#    options afterward.
define TOSMake_extra_targets
$(subst :,%,$(1)): FORCE
	@:
endef

#  TOSMake_include_dir(dir)
#    Pull in .extras and .targets from a directory which MUST be a subdir
#    under TOSMAKE_PATH.  Create default extra rules as necessary, etc.
TOSMake_include_dir = $(eval $(call TOSMake_include_dir_define,$(1)))
define TOSMake_include_dir_define
$(eval NEW_EXTRAS := $(call TOSMake_makelist,$(1),extra))
$(eval NEW_TARGETS := $(call TOSMake_makelist,$(1),target))
$(eval VALID_EXTRAS += $(NEW_EXTRAS))
$(eval VALID_TARGETS += $(NEW_TARGETS))
$(eval EXTRAS = $(filter $(call names,$(VALID_EXTRAS)),$(GOALS)))
$(eval TARGETS = $(filter $(call names,$(VALID_TARGETS)),$(GOALS)))
$(eval OTHERS = $(filter-out $(EXTRAS) $(TARGETS),$(GOALS)))
$(foreach file,$(NEW_EXTRAS) $(NEW_TARGETS),$(if $(filter $(call names,$(file)),$(GOALS)),$(eval include $(file))))
endef

TOSMake_accum_dir = $(eval $(call TOSMake_accum_dir_define,$(1)))
define TOSMake_accum_dir_define
$(eval NEW_EXTRAS := $(call TOSMake_makelist,$(1),extra))
$(eval NEW_TARGETS := $(call TOSMake_makelist,$(1),target))
$(eval VALID_EXTRAS += $(NEW_EXTRAS))
$(eval VALID_TARGETS += $(NEW_TARGETS))
$(eval TARGETS = $(filter $(call names,$(VALID_TARGETS)),$(GOALS)))
endef

#  TOSMake_include_platform(dir)
#    Pull in a directory as a new TOSMake platform, which MUST be a subdir of
#    TOSMAKE_PATH.  A platform directory must also have a .rules file, which
#    is automatically evaluated.
TOSMake_include_make_platform=$(eval $(call TOSMake_include_make_platform_define,$(1)))
define TOSMake_include_make_platform_define
$(call TOSMake_include_dir,$(1))
$(call TOSMake_include,$(1)/$(1).rules)
endef

# TOSMake_include_sensor(sensorboard)
#  Includes the [sensorboard].sensor file from the $TOSMAKE_PATH/sensors folder.
#  Use this function to add a sensorboard to a target.
TOSMake_include_sensor=$(eval $(call TOSMake_include_sensor_define,$(1)))
define TOSMake_include_sensor_define
$(call TOSMake_include,sensors/$(1).sensor)
endef

# TOSMake_include_platform(platform)
#  Use this to specify which platform the target is based on.
TOSMake_include_platform=$(eval $(call TOSMake_include_platform_define,$(1)))
define TOSMake_include_platform_define
$(call TOSMake_include,platforms/$(1).platform)
endef

# TOSMake_include_family(family)
#  Specify that this target is part of a family.
TOSMake_include_family=$(eval $(call TOSMake_include_family_define,$(1)))
define TOSMake_include_family_define
$(call TOSMake_include,families/$(1).family)
endef


### ---
### --- Common targets
### ---

build_dir:
	@mkdir -p $(TOSMAKE_BUILD_DIR)


### ---
### --- Include Makelocal and Makedefaults
### ---

#  Makelocal comes first to allow overriding Makedefaults.
-include $(TINYOS_MAKELOCAL)
-include $(TINYOS_MAKEDEFAULTS)

PLATFORMDIR ?= $(TINYOS_OS_DIR)/platforms/$(PLATFORM)

#  Mark TOSMAKE_PATH with a + so that they're not searched for by TOSMake_find.
$(foreach incdir,$(addprefix +,$(TOSMAKE_PATH)),$(call TOSMake_accum_dir,$(incdir)))

$(foreach file,$(VALID_EXTRAS),$(if $(filter $(call names,$(file)),$(GOALS)),$(eval include $(file))))
$(foreach file,$(VALID_TARGETS),$(if $(filter $(call names,$(file)),$(GOALS)),$(eval include $(file))))

#  Make default rules for each extra with full argument
$(foreach goal,$(MAKECMDGOALS),$(if $(filter-out $(TARGETS) help,$(goal)),$(eval $(call TOSMake_extra_targets,$(goal)))))


### ---
### --- Define USAGE, print help if necessary or requested, etc.
### ---

#  USAGE is printed out when help is requested.  Files other than this should
#  add text to HELP, not USAGE.
define USAGE


Usage:  make <target> <extras>
        make <target> help

        Valid targets: $(call names,$(VALID_TARGETS))
        Valid extras: $(call names,$(VALID_EXTRAS))
$(HELP)

endef

#  If no target or an invalid target is specified, print usage.
ifeq ($(TARGETS),)
  ifeq ($(GOALS),)
    $(error $(USAGE)Please specify a valid target)
  else
    $(error $(USAGE)ERROR, "$(GOALS)" does not specify a valid target)
  endif
endif

#  If the user specifically had help on the command line, don't build any
#  targets, instead display help information and exit with a nice error.
ifeq ($(filter help,$(GOALS)),help)
define USAGE


Usage:  make $(TARGETS) <extras>

	Valid targets: $(call names,$(VALID_TARGETS))
        Valid extras: $(call names,$(VALID_EXTRAS))
$(HELP)

endef
$(error $(USAGE)Thank you)
endif

$(COMPONENT).nc:
	@echo "ERROR: You need to create a top level file called $(COMPONENT).nc, or modify your local Makefile to point to the real name of your top level component."
	@false

.PHONY: FORCE

